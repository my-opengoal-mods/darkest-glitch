;;-*-Lisp-*-
(in-package goal)

(define-extern *multiplayer-info* multiplayer-info)
(require "engine/game/game-save.gc")
(require "engine/game/task/game-task-h.gc")
(require "pc/pckernel-common.gc")
(require "pc/features/autosplit-h.gc")

(define *should-display-idle-deload-info?* #f)

(define *speedrun-info* (new 'static 'speedrun-info-jak1 :should-display? #t :needs-post-blackout-setup? #f))

(define *has-landed?* #f)

(define-extern *mod-version-text* string)

(define *hub1-cell-list*
  (new 'static
       'boxed-array
       :type
       game-task
       (game-task training-gimmie)
       (game-task training-door)
       (game-task training-climb)
       (game-task training-buzzer)
       (game-task village1-mayor-money)
       (game-task village1-uncle-money)
       (game-task village1-yakow)
       (game-task village1-oracle-money1)
       (game-task village1-oracle-money2)
       (game-task village1-buzzer)
       (game-task beach-ecorocks)
       (game-task beach-flutflut)
       (game-task beach-pelican)
       (game-task beach-seagull)
       (game-task beach-cannon)
       (game-task beach-gimmie)
       (game-task beach-sentinel)
       (game-task beach-buzzer)
       (game-task jungle-lurkerm)
       (game-task jungle-tower)
       (game-task jungle-eggtop)
       (game-task jungle-plant)
       (game-task jungle-fishgame)
       (game-task jungle-canyon-end)
       (game-task jungle-temple-door)
       (game-task jungle-buzzer)
       (game-task misty-muse)
       (game-task misty-boat)
       (game-task misty-cannon)
       (game-task misty-warehouse)
       (game-task misty-bike)
       (game-task misty-bike-jump)
       (game-task misty-eco-challenge)
       (game-task misty-buzzer)
       (game-task firecanyon-end)
       (game-task firecanyon-buzzer)))

(define *hub2-cell-list*
  (new 'static
       'boxed-array
       :type
       game-task
       (game-task training-gimmie)
       (game-task training-door)
       (game-task training-climb)
       (game-task training-buzzer)
       (game-task village1-mayor-money)
       (game-task village1-uncle-money)
       (game-task village1-yakow)
       (game-task village1-oracle-money1)
       (game-task village1-oracle-money2)
       (game-task village1-buzzer)
       (game-task beach-ecorocks)
       (game-task beach-flutflut)
       (game-task beach-pelican)
       (game-task beach-seagull)
       (game-task beach-cannon)
       (game-task beach-gimmie)
       (game-task beach-sentinel)
       (game-task beach-buzzer)
       (game-task jungle-lurkerm)
       (game-task jungle-tower)
       (game-task jungle-eggtop)
       (game-task jungle-plant)
       (game-task jungle-fishgame)
       (game-task jungle-canyon-end)
       (game-task jungle-temple-door)
       (game-task jungle-buzzer)
       (game-task misty-muse)
       (game-task misty-boat)
       (game-task misty-cannon)
       (game-task misty-warehouse)
       (game-task misty-bike)
       (game-task misty-bike-jump)
       (game-task misty-eco-challenge)
       (game-task misty-buzzer)
       (game-task firecanyon-end)
       (game-task firecanyon-buzzer)))

(define *hub2-cell-list*
  (new 'static
       'boxed-array
       :type
       game-task
       (game-task village2-gambler-money)
       (game-task village2-geologist-money)
       (game-task village2-warrior-money)
       (game-task village2-oracle-money1)
       (game-task village2-oracle-money2)
       (game-task village2-buzzer)
       (game-task sunken-room)
       (game-task sunken-pipe)
       (game-task sunken-slide)
       (game-task sunken-sharks)
       (game-task sunken-platforms)
       (game-task sunken-top-of-helix)
       (game-task sunken-spinning-room)
       (game-task sunken-buzzer)
       (game-task swamp-flutflut)
       (game-task swamp-billy)
       (game-task swamp-battle)
       (game-task swamp-tether-4)
       (game-task swamp-tether-1)
       (game-task swamp-tether-2)
       (game-task swamp-tether-3)
       (game-task swamp-buzzer)
       (game-task rolling-moles)
       (game-task rolling-robbers)
       (game-task rolling-race)
       (game-task rolling-lake)
       (game-task rolling-plants)
       (game-task rolling-ring-chase-1)
       (game-task rolling-ring-chase-2)
       (game-task rolling-buzzer)
       (game-task ogre-boss)
       (game-task ogre-end)
       (game-task ogre-secret)
       (game-task ogre-buzzer)))

(define *hub3-cell-list*
  (new 'static
       'boxed-array
       :type
       game-task
       (game-task village3-miner-money1)
       (game-task village3-miner-money2)
       (game-task village3-miner-money3)
       (game-task village3-miner-money4)
       (game-task village3-oracle-money1)
       (game-task village3-oracle-money2)
       (game-task village3-extra1)
       (game-task village3-buzzer)
       (game-task snow-eggtop)
       (game-task snow-ram)
       (game-task snow-bumpers)
       (game-task snow-cage)
       (game-task snow-fort)
       (game-task snow-ball)
       (game-task snow-bunnies)
       (game-task snow-buzzer)
       (game-task cave-gnawers)
       (game-task cave-dark-crystals)
       (game-task cave-dark-climb)
       (game-task cave-robot-climb)
       (game-task cave-swing-poles)
       (game-task cave-spider-tunnel)
       (game-task cave-platforms)
       (game-task cave-buzzer)
       (game-task lavatube-end)
       (game-task lavatube-buzzer)))

;; unused
;; (define *citadel-cell-list* (new 'static 'boxed-array :type game-task
;;   (game-task citadel-sage-blue)
;;   (game-task citadel-sage-red)
;;   (game-task citadel-sage-yellow)
;;   (game-task citadel-sage-green)
;;   (game-task citadel-buzzer)
;;   ))

(defun is-speedrun-category? ((category symbol))
  (and (-> *pc-settings* speedrunner-mode?)
       (name= category (enum->string speedrun-category (-> *speedrun-info* category)))))

(defun enforce-speedrun-pc-settings ()
  ;; Disable any active cheats
  (set! (-> *pc-settings* cheats) (the-as pc-cheats #x0))
  ;; ensure PS2 actor vis is enabled
  (set! (-> *pc-settings* ps2-actor-vis?) #f)
  ;; ensure FPS set to `60`
  (when (!= (-> *pc-settings* target-fps) 60)
    (set-frame-rate! *pc-settings* 60 #t))
  (none))

(defun start-speedrun ((category speedrun-category))
  ;; randomize game id so the autosplitter knows to restart
  (update-autosplit-jak1-new-game)
  ;; disable hints (turned back on later for all-cutscenes category)
  (set! (-> *setting-control* default play-hints) #f)
  ;; turn on speedrun verification display and flip flag for setting up speedrun after initialize!
  (set! (-> *speedrun-info* should-display?) #t)
  (set! (-> *speedrun-info* needs-post-blackout-setup?) #t)
  ;; start new game with specified checkpoint, if any (otherwise we're resetting current category)
  (if category (set! (-> *speedrun-info* category) category))
  (case (-> *speedrun-info* category)
    (((speedrun-category full-game))
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    (((speedrun-category il-training))
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    (((speedrun-category il-village1))
     ;; spawn at the green sage hut warp gate
     (initialize! *game-info* 'game (the-as game-save #f) "village1-warp"))
    (((speedrun-category il-beach))
     ;; spawn at beach
     (initialize! *game-info* 'game (the-as game-save #f) "beach-start"))
    (((speedrun-category il-jungle))
     ;; spawn at start of FJ
     (initialize! *game-info* 'game (the-as game-save #f) "jungle-start"))
    (((speedrun-category il-misty))
     ;; spawn at start of misty
     (initialize! *game-info* 'game (the-as game-save #f) "misty-start"))
    (((speedrun-category il-firecanyon))
     ;; spawn at start of fire canyon
     (initialize! *game-info* 'game (the-as game-save #f) "firecanyon-start"))
    (((speedrun-category il-village2))
     ;; spawn at rock village start
     (initialize! *game-info* 'game (the-as game-save #f) "village2-start"))
    (((speedrun-category il-sunken))
     ;; spawn at start of LPC
     (initialize! *game-info* 'game (the-as game-save #f) "sunken-start"))
    (((speedrun-category il-swamp))
     ;; spawn at start of boggy
     (initialize! *game-info* 'game (the-as game-save #f) "swamp-start"))
    (((speedrun-category il-rolling))
     ;; spawn at start of basin
     (initialize! *game-info* 'game (the-as game-save #f) "rolling-start"))
    (((speedrun-category il-ogre))
     ;; spawn before klaww
     (initialize! *game-info* 'game (the-as game-save #f) "ogre-start"))
    (((speedrun-category il-village3))
     ;; spawn at start of volcanic crater
     (initialize! *game-info* 'game (the-as game-save #f) "village3-start"))
    (((speedrun-category il-snow))
     ;; spawn at start of snowy
     (initialize! *game-info* 'game (the-as game-save #f) "snow-start"))
    (((speedrun-category il-cave))
     ;; spawn at start of spider cave
     (initialize! *game-info* 'game (the-as game-save #f) "maincave-start"))
    (((speedrun-category il-lavatube))
     ;; spawn at start of lava tube
     (initialize! *game-info* 'game (the-as game-save #f) "lavatube-start"))
    (((speedrun-category il-citadel))
     ;; spawn outside first citadel door
     (initialize! *game-info* 'game (the-as game-save #f) "citadel-entrance"))
    (((speedrun-category new-game-plus))
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    (((speedrun-category hub1-100))
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    (((speedrun-category hub2-100))
     ;; spawn at end of fire canyon
     (initialize! *game-info* 'game (the-as game-save #f) "firecanyon-end"))
    (((speedrun-category hub3-100))
     ;; spawn at end of mountain pass
     (initialize! *game-info* 'game (the-as game-save #f) "ogre-end"))
    (((speedrun-category all-cutscenes))
     ;; turn play hints back on
     (set! (-> *setting-control* default play-hints) #t)
     ;; don't allow cutscene skips
     (set! (-> *pc-settings* skip-movies?) #f)
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "intro-start"))
    (else
     (format 0 "start-speedrun: unrecognized category ~S~%" (enum->string speedrun-category (-> *speedrun-info* category)))))
  (enforce-speedrun-pc-settings)
  ;; enable auto saving by default
  (set! (-> *setting-control* default auto-save) #t)
  (none))

(defun setup-speedrun-post-blackout ()
  (when (and (-> *speedrun-info* needs-post-blackout-setup?)
             (>= (-> *display* base-frame-counter) (-> *game-info* blackout-time)))
    (set! (-> *speedrun-info* needs-post-blackout-setup?) #f)
    (case (-> *speedrun-info* category)
      (((speedrun-category full-game))
       ;; skip intro cutscene
       (close-specific-task! (game-task intro) (task-status need-resolution)))
      (((speedrun-category il-training))
       ;; skip intro cutscene
       (close-specific-task! (game-task intro) (task-status need-resolution))
       (mark-text-as-seen *game-info* (text-id training-level-name)))
      (((speedrun-category il-village1))
       ;; give enough orbs to buy all cells 120+120+90+90=420
       (set! (-> *game-info* money-total) 420.0)
       (set! (-> *game-info* money) 420.0)
       (mark-text-as-seen *game-info* (text-id village1-level-name)))
      (((speedrun-category il-beach))
       ;; unlock blue eco vent
       (close-specific-task! (game-task jungle-eggtop) (task-status need-resolution))
       (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task jungle-eggtop)))
       (mark-text-as-seen *game-info* (text-id beach-level-name)))
      (((speedrun-category il-jungle)) (mark-text-as-seen *game-info* (text-id jungle-level-name)))
      (((speedrun-category il-misty))
       ;; unlock fisherman's boat
       (close-specific-task! (game-task jungle-fishgame) (task-status need-resolution))
       (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task jungle-fishgame)))
       (mark-text-as-seen *game-info* (text-id misty-level-name)))
      (((speedrun-category il-firecanyon))
       ;; skip keira intro cutscene
       (close-specific-task! (game-task firecanyon-assistant) (task-status need-reward-speech))
       ;; unlock blue eco vent
       (close-specific-task! (game-task jungle-eggtop) (task-status need-resolution))
       (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task jungle-eggtop)))
       (mark-text-as-seen *game-info* (text-id firecanyon-level-name)))
      (((speedrun-category il-village2))
       ;; give enough orbs to buy all cells 120+120+90+90+90=510
       (set! (-> *game-info* money-total) 510.0)
       (set! (-> *game-info* money) 510.0)
       (mark-text-as-seen *game-info* (text-id village2-level-name)))
      (((speedrun-category il-sunken)) (mark-text-as-seen *game-info* (text-id sunken-level-name)))
      (((speedrun-category il-swamp))
       ;; unlock flutflut
       (close-specific-task! (game-task beach-flutflut) (task-status need-resolution))
       (close-specific-task! (game-task village2-levitator) (task-status need-introduction))
       (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task beach-flutflut)))
       (mark-text-as-seen *game-info* (text-id swamp-level-name)))
      (((speedrun-category il-rolling))
       ;; unlock zoomer
       (close-specific-task! (game-task village2-levitator) (task-status need-introduction))
       ;; unlock DMG
       (close-specific-task! (game-task rolling-race) (task-status need-introduction))
       ;; unlock moles
       (close-specific-task! (game-task rolling-moles) (task-status need-introduction))
       (mark-text-as-seen *game-info* (text-id rolling-level-name)))
      (((speedrun-category il-ogre))
       ;; skip klaww intro cutscene
       (close-specific-task! (game-task ogre-boss) (task-status need-hint))
       ;; unlock yellow eco vent
       (close-specific-task! (game-task snow-eggtop) (task-status need-resolution))
       (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task snow-eggtop)))
       (mark-text-as-seen *game-info* (text-id ogre-level-name)))
      (((speedrun-category il-village3))
       ;; give enough orbs to buy all cells 120+120+90+90+90+90=600
       (set! (-> *game-info* money-total) 600.0)
       (set! (-> *game-info* money) 600.0)
       (mark-text-as-seen *game-info* (text-id village3-level-name)))
      (((speedrun-category il-snow))
       ;; unlock flutflut
       (close-specific-task! (game-task beach-flutflut) (task-status need-resolution))
       (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task beach-flutflut)))
       ;; unlock gondola
       (close-specific-task! (game-task village3-button) (task-status need-introduction))
       (mark-text-as-seen *game-info* (text-id snow-level-name)))
      (((speedrun-category il-cave))
       ;; unlock yellow eco vent
       (close-specific-task! (game-task snow-eggtop) (task-status need-resolution))
       (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task snow-eggtop)))
       (mark-text-as-seen *game-info* (text-id cave-level-name)))
      (((speedrun-category il-lavatube))
       ;; skip keira intro cutscene
       (close-specific-task! (game-task lavatube-start) (task-status need-reward-speech))
       (mark-text-as-seen *game-info* (text-id lavatube-level-name)))
      (((speedrun-category il-citadel))
       ;; remove invisible wall
       (close-specific-task! (game-task lavatube-end) (task-status need-resolution))
       (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task lavatube-end)))
       ;; unlock door
       (close-specific-task! (game-task village4-button) (task-status need-reward-speech))
       (mark-text-as-seen *game-info* (text-id citadel-level-name)))
      (((speedrun-category new-game-plus))
       ;; skip intro cutscene
       (close-specific-task! (game-task intro) (task-status need-resolution))
       ;; unlock hub1 cells
       (dotimes (idx (length *hub1-cell-list*))
         (close-specific-task! (-> *hub1-cell-list* idx) (task-status need-resolution))
         (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub1-cell-list* idx))))
       ;; unlock hub2 cells
       (dotimes (idx (length *hub2-cell-list*))
         (close-specific-task! (-> *hub2-cell-list* idx) (task-status need-resolution))
         (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub2-cell-list* idx))))
       ;; unlock hub3 cells
       (dotimes (idx (length *hub3-cell-list*))
         (close-specific-task! (-> *hub3-cell-list* idx) (task-status need-resolution))
         (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub3-cell-list* idx)))))
      (((speedrun-category hub1-100))
       ;; skip intro cutscene
       (close-specific-task! (game-task intro) (task-status need-resolution)))
      (((speedrun-category hub2-100))
       ;; skip intro cutscene
       (close-specific-task! (game-task intro) (task-status need-resolution))
       ;; unlock hub1 cells
       (dotimes (idx (length *hub1-cell-list*))
         (close-specific-task! (-> *hub1-cell-list* idx) (task-status need-resolution))
         (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub1-cell-list* idx))))
       ;; give all orbs from hub1
       (set! (-> *game-info* money-total) 600.0) ;; 50+50+150+150+150+50
       (set! (-> *game-info* money) 180.0) ;; 50+50+150+150+150+50 - (90+90+120+120)
       )
      (((speedrun-category hub3-100))
       ;; skip intro cutscene
       (close-specific-task! (game-task intro) (task-status need-resolution))
       ;; unlock hub1 cells
       (dotimes (idx (length *hub1-cell-list*))
         (close-specific-task! (-> *hub1-cell-list* idx) (task-status need-resolution))
         (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub1-cell-list* idx))))
       ;; unlock hub2 cells
       (dotimes (idx (length *hub2-cell-list*))
         (close-specific-task! (-> *hub2-cell-list* idx) (task-status need-resolution))
         (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub2-cell-list* idx))))
       ;; give all orbs from hub1+2
       (set! (-> *game-info* money-total) 1300.0) ;; 50+50+150+150+150+50 + 50+200+200+200+50
       (set! (-> *game-info* money) 370.0) ;; 50+50+150+150+150+50 - (90+90+120+120) + 50+200+200+200+50 - (90+90+90+120+120)
       )
      (((speedrun-category all-cutscenes))
       ;; no post-blackout actions needed
       )
      (else
       (format 0
               "setup-speedrun-post-blackout: unrecognized category ~S~%"
               (enum->string speedrun-category (-> *speedrun-info* category)))))
    ;; reset speedrun display (gets hidden on first collectable pickup)
    (set! (-> *speedrun-info* should-display?) #t)
    ;; reset actors to ensure any above changes take effect
    (reset-actors 'life)
    ;; autosave any changes back to file
    (auto-save-command 'auto-save 0 0 *default-pool*))
  (none))

(defun hide-speedrun-display ()
  (set! (-> *speedrun-info* should-display?) #f)
  (none))

(defun speedrun-mode-update ()
  "A per frame update for speedrunning related stuff"
  (when (-> *pc-settings* speedrunner-mode?)
    ;; Update auto-splitter
    (update-autosplit-info-jak1)
    ;; Draw info to the screen
    (speedrun-draw-settings)
    (enforce-speedrun-pc-settings)
    ;; Run after-blackout speedrun setup (if needed)
    (setup-speedrun-post-blackout))
  (none))

(defun speedrun-start-full-game-run ()
  ;; start a full game speedrun, save file is already selected so don't default to first slot
  (start-speedrun (speedrun-category full-game))
  (none))

(defun draw-plane ((v1 vector) (v2 vector) (v3 vector) (v4 vector) (arg3 dma-buffer))
  (rlet ((vf27 :class vf))
    (vector-copy! (-> *boundary-polygon* 0) v1)
    (vector-copy! (-> *boundary-polygon* 3) v2)
    (vector-copy! (-> *boundary-polygon* 6) v3)
    (vector-copy! (-> *boundary-polygon* 9) v4)
    ;; colors?
    (let ((v1-1 (-> *boundary-polygon* 2)))
      (set! (-> v1-1 x) 128.0)
      (set! (-> v1-1 y) 128.0)
      (set! (-> v1-1 z) 128.0)
      (set! (-> v1-1 v w) 128.0)
      )
    (let ((v1-1 (-> *boundary-polygon* 5)))
      (set! (-> v1-1 x) 128.0)
      (set! (-> v1-1 y) 128.0)
      (set! (-> v1-1 z) 128.0)
      (set! (-> v1-1 v w) 128.0)
      )

    ;; idk?
    ;;  (cond
    ;;   (arg4
    (let ((v1-4 (-> *boundary-polygon* 1)))
      (set! (-> v1-4 x) 0.0)
      (set! (-> v1-4 y) 0.0)
      (set! (-> v1-4 z) 1.0)
      (set! (-> v1-4 v w) 1.0)
      )
    (let ((v1-6 (-> *boundary-polygon* 4)))
      (set! (-> v1-6 x) 1.0)
      (set! (-> v1-6 y) 0.0)
      (set! (-> v1-6 z) 1.0)
      (set! (-> v1-6 v w) 1.0)
      )
    (let ((v1-8 (-> *boundary-polygon* 7)))
      (set! (-> v1-8 x) 1.0)
      (set! (-> v1-8 y) 8.0)
      (set! (-> v1-8 z) 1.0)
      (set! (-> v1-8 v w) 1.0)
      )
    (let ((v1-10 (-> *boundary-polygon* 10)))
      (set! (-> v1-10 x) 0.0)
      (set! (-> v1-10 y) 8.0)
      (set! (-> v1-10 z) 1.0)
      (set! (-> v1-10 v w) 1.0)
      )
    ;;  )
    ;; (else
    ;;  (let ((v1-12 (-> *boundary-polygon* 1)))
    ;;   (set! (-> v1-12 x) 1.0)
    ;;   (set! (-> v1-12 y) 0.0)
    ;;   (set! (-> v1-12 z) 1.0)
    ;;   (set! (-> v1-12 v w) 1.0)
    ;;   )
    ;;  (let ((v1-14 (-> *boundary-polygon* 4)))
    ;;   (set! (-> v1-14 x) 0.0)
    ;;   (set! (-> v1-14 y) 0.0)
    ;;   (set! (-> v1-14 z) 1.0)
    ;;   (set! (-> v1-14 v w) 1.0)
    ;;   )
    ;;  (let ((v1-16 (-> *boundary-polygon* 7)))
    ;;   (set! (-> v1-16 x) 0.0)
    ;;   (set! (-> v1-16 y) 8.0)
    ;;   (set! (-> v1-16 z) 1.0)
    ;;   (set! (-> v1-16 v w) 1.0)
    ;;   )
    ;;  (let ((v1-18 (-> *boundary-polygon* 10)))
    ;;   (set! (-> v1-18 x) 1.0)
    ;;   (set! (-> v1-18 y) 8.0)
    ;;   (set! (-> v1-18 z) 1.0)
    ;;   (set! (-> v1-18 v w) 1.0)
    ;;   )
    ;;  )
    ;; )
    (init-boundary-regs)
    ;;(.lvf vf27 (&-> *sky-tng-data* giftag-roof qword))
    (set-sky-vf27 (&-> *sky-tng-data* giftag-roof qword))
    (render-boundary-quad (-> *boundary-polygon* 0) arg3)
    0
    (none)
    )
  )

(defun draw-idle-deload-info ()
  (when (and *should-display-idle-deload-info?*
             (not (paused?)))
    (let ((y-offset (if (-> *speedrun-info* should-display?) 9 4))
          (backup-lvl
            (case (-> *backup-load-state* vis-nick)
              (('tra) training)
              (('vi1) village1)
              (('bea) beach)
              (('jun) jungle)
              (('jub) jungleb)
              (('mis) misty)
              (('fic) firecanyon)
              (('vi2) village2)
              (('sun) sunken)
              (('sub) sunkenb)
              (('swa) swamp)
              (('rol) rolling)
              (('ogr) ogre)
              (('vi3) village3)
              (('sno) snow)
              (('mai) maincave)
              (('dar) darkcave)
              (('rob) robocave)
              (('lav) lavatube)
              (('cit) citadel)
              (('fin) finalboss)
              (('dem) demo)
              (('tit) title)
              (else (the-as level-load-info #f))
              )
            )
          (continue_a (the-as continue-point #f))
          (a_dist 0.0)
          (continue_b (the-as continue-point #f))
          (b_dist 0.0)
          )
      (when (and ;; (= (-> s4-1 status) 'active)  ;; backed up level might not be loaded, but will be if deload happens
                 (null? (-> *level* load-commands)) ;; who cares
                 ;;  (= (-> s4-1 nickname) (-> *load-state* vis-nick))  ;; no need to check this, we're choosing level based on this already
                 (!= (-> backup-lvl name) (-> *game-info* current-continue level))
                 (-> *level* border?)
                 )
        (let* ((s2-0 (target-pos 0))
              (s4-2 (-> backup-lvl continues))
              (s1-0 (the-as continue-point (car s4-2)))
              )
          (while (not (null? s4-2))
            (when (zero? (-> s1-0 flags))
              (let ((t_dist (vector-vector-distance s2-0 (-> s1-0 trans))))
                (cond
                  ((or (not continue_a) (< t_dist a_dist))
                    ;; found new closest
                    (set! continue_b continue_a)  ;; old best is now second best
                    (set! b_dist a_dist)
                    (set! continue_a s1-0)
                    (set! a_dist t_dist)
                    )
                  ((or (not continue_b) (< t_dist b_dist))
                    ;; well we're at least closer than the old continue_b
                    (set! continue_b s1-0)
                    (set! b_dist t_dist)
                    )
                  )
                )
              )
              (set! s4-2 (cdr s4-2))
              (set! s1-0 (the-as continue-point (car s4-2)))
            )
          )
        )

      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                        (bucket-id subtitle))
        (draw-string-xy (string-format "Current continue: ~A ~%Backup level: ~A ~%Closest deload continue: ~A ~Mm~%2nd deload continue: ~A ~Mm"
                                        (-> *game-info* current-continue name)
                                        (-> backup-lvl name)
                                        (-> continue_a name)
                                        a_dist
                                        (-> continue_b name)
                                        b_dist
                                        )
                        buf 0 (- 220 (* 8 y-offset)) (font-color flat-yellow) (font-flags shadow kerning))
        )

      (when (and continue_a continue_b)
        (with-dma-buffer-add-bucket ((s5-0 (-> (current-frame) global-buf)) (bucket-id debug))
          (dma-buffer-add-gs-set-flusha s5-0
              (zbuf-1 (new 'static 'gs-zbuf :zbp #x1c0 :psm (gs-psm ct24)))
              (test-1 (new 'static 'gs-test :ate #x1 :atst (gs-atest greater-equal) :aref #x26 :zte #x1 :ztst (gs-ztest greater-equal)))
              (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1))
              )
          (with-cnt-vif-block-qwc (s5-0)
            (add-boundary-shader (new 'static 'texture-id :index #x33 :page #x2) s5-0)
              (let ((mid (new 'stack-no-clear 'vector))
                    (normal (new 'stack-no-clear 'vector))
                    (m_t (new 'stack-no-clear 'vector))
                    (sp_t 0.0)
                    (p_t (new 'stack-no-clear 'vector))
                    (normal1 (new 'stack-no-clear 'vector))
                    (normal2 (new 'stack-no-clear 'vector))
                    (v1 (new 'stack-no-clear 'vector))
                    (v2 (new 'stack-no-clear 'vector))
                    (v3 (new 'stack-no-clear 'vector))
                    (v4 (new 'stack-no-clear 'vector))
                    )
                ;; find midpoint
                (vector-average! mid (-> continue_a trans) (-> continue_b trans))
                ;; direction from A to B
                (vector-! normal (-> continue_b trans) (-> continue_a trans))
                ;; compute normal for plane
                (vector-normalize! normal 1.0)
                ;; find closest point on plane to target
                (vector-! m_t (target-pos 0) mid)
                (set! sp_t (vector-dot m_t normal))
                (vector--float*! p_t (target-pos 0) normal sp_t)
                ;; find rectangle coordinates
                (vector-cross! normal1 normal (new 'static 'vector :x 1.0))
                (vector-normalize! normal1 1.0)
                (vector-cross! normal2 normal (new 'static 'vector :y 1.0))
                (vector-normalize! normal2 1.0)
                (vector+float*! v1 p_t normal1 (meters 30.0))
                (vector+float*! v1 v1 normal2 (meters 30.0))
                (vector+float*! v2 p_t normal1 (meters -30.0))
                (vector+float*! v2 v2 normal2 (meters 30.0))
                (vector+float*! v3 p_t normal1 (meters -30.0))
                (vector+float*! v3 v3 normal2 (meters -30.0))
                (vector+float*! v4 p_t normal1 (meters 30.0))
                (vector+float*! v4 v4 normal2 (meters -30.0))
                ;; finally draw this mfer
                (draw-plane v1 v2 v3 v4 s5-0)
                )
              (close-sky-buffer s5-0)
            )
          )
        )
      )
    )
  (none)
  )

(defun speedrun-draw-settings ()
  "Draw speedrun related settings in the bottom left corner"
  (draw-idle-deload-info)

  (when (and (-> *pc-settings* speedrunner-mode?)
             (not (paused?))
             (-> *speedrun-info* should-display?))
    ;; check if we've landed (either we're on ground/surface/water, or about to target-hit-ground)
    (when (and *target*
               (or (logtest? (-> *target* control status) (cshape-moving-flags onground onsurf on-water))
                   (= (-> *target* next-state name) 'target-hit-ground)))
      (true! *has-landed?*))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Darkest Glitch Mod~%Speedrunner Mode ~%OpenGOAL Version: ~S ~%TR Client Version: ~S ~%Category: ~S ~%Cutscene Skips ~A"
                                     *pc-settings-built-sha*
                                     (-> *multiplayer-info* client_version)
                                     (enum->string speedrun-category (-> *speedrun-info* category))
                                     (-> *pc-settings* skip-movies?)
                                     *has-landed?*)
                      buf
                      0
                      (- 220 (* 8 6))
                      (font-color flat-yellow)
                      (font-flags shadow kerning))))
  (none))
