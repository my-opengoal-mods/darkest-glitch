    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-game-handler.gc
    ;; name in dgo: mod-game-handler
    ;; dgos: TODO


;; teamruns data
(define *teamrun-info* (new 'global 'teamrun-player-info))
(define *teamrun-levels-info* (new 'global 'game-levels-info))
(define *zoomer-level-unlocks* (new 'global 'zoomer-level-unlocks))

;; interaction data
(define *interaction-update-buffer* (new 'global 'boxed-array interaction-info MAX_INTERACTION_BUFFER_COUNT))
(define *last-task* (game-task none)) ;; tasks get closed twice in a row sometimes, this is used to prevent it from sending multiple of same close over socket
(define *last-task-status* (task-status invalid))

;; teamruns settings
(define *enable-ingame-cutscenes?* #f) ;; should always be #f in multiplayer, some multiplayer stuff that isn't entirely cutscene related uses this as well !TODO: fix that maybe (see robotboss/sage-finalboss/boat? as example)

;; multiplayer data
(define *multiplayer-info* (new 'global 'multiplayer-info))
(define *remote-targets* (new 'global 'boxed-array handle MAX_MULTIPLAYER_COUNT))
(define *remote-target-active-count* 0)
(define *enable-remote-target-yellow-eco-blasts* #t)

;; multiplayer self
(define *self-setup-completed* #f)
(define *self-player-info* (the-as remote-player-info #f))

;; teamruns data
(define *pause-handler* (new 'global 'time-handler)) ;;handles killing spool anims on pause

;; multiplayer fixes
(define *allow-cell-pickup?* #t)
(define *allow-orb-pickup?* #t)
(define *allow-fly-pickup?* #t)
(define *allow-final-boss?* #t)
(define *allow-one-time-citadel-skip?* #t)
(define *current-boss-phase* 10)

(define *target-on-active-gondola?* #f)
(define *move-by-index-on-spawn* #f)

(define *has-none-position-update?* #f)

;; remote level check fix by added delay as they're set on the same frame and can cause check bugs
(define *run-remote-level-update-check-next-frame* #f)

;; stuck in remote target fix
(define *remote-stuck-released* #f)
(define *remote-stuck-release-timestamp* (current-time))

;; multiplayer save and load
(define *enable-multiplayer-save-and-load* #t)
(define *player-can-load* #f)
(define *save-ui-settings* #f)
(define *pause-multiplayer-logic* #f)

;; pickup toggles for remote
(define *enable-remote-target-buzzer-pickup* #f) ;; recommended to be #f and instead controlled by position data interactions so that cell fly can't drop two cells on pickup
(define *enable-remote-target-money-pickup* #f) ;; recommended to be #f and instead controlled by position data interactions to prevent orbs pickups to count as current user pickups
(define *enable-remote-target-eco-pickup* #f) ;; recommended to be #f and instead controlled by position data interactions so that the physical target can't accidentally miss it




(defun reset-run-variables ()
  (set! (-> *zoomer-level-unlocks* fire-canyon) #f)
  (set! (-> *zoomer-level-unlocks* mountain-pass) #f)
  (set! (-> *zoomer-level-unlocks* lava-tube) #f)
  (set! *allow-one-time-citadel-skip?* #t)
)

(defun target-on-racer? ((t target))
  (logtest? (-> t control root-prim prim-core action) (collide-action racer))
)

(defun target-on-flut? ((t target))
  (logtest? (-> t control root-prim prim-core action) (collide-action flut))
)

(defun target-on-tube? ((t target))
  (logtest? (-> t control root-prim prim-core action) (collide-action tube))
)

(defun target-on-foot? ((t target))
  (not (logtest? (-> t control root-prim prim-core action) (collide-action racer flut)))
)

(defun target-is-interactive? ((remote-target target))
  (if (and remote-target (is-interactive? (the int (-> remote-target saved-owner)))) #t #f)
  )

(defun is-interactive? ((tgt-idx int))
  (= (-> *multiplayer-info* players tgt-idx mp_state) (mp-tgt-state mp-tgt-interactive))
  )

(defun is-active? ((tgt-idx int))
  (= (-> *multiplayer-info* players tgt-idx mp_state) (mp-tgt-state mp-tgt-active))
  )

(defun is-inactive? ((tgt-idx int))
  (= (-> *multiplayer-info* players tgt-idx mp_state) (mp-tgt-state mp-tgt-disconnected))
  )

(defun is-teammate? ((tgt-idx int))
  (= (-> *multiplayer-info* players tgt-idx team_id) (-> *self-player-info* team_id))
  )

(defun has-new-mp-state? ((tgt-idx int))
  (!= (-> *multiplayer-info* players tgt-idx mp_state) (-> *multiplayer-info* players tgt-idx mp_state_check))
  )

(defun target-has-mp-state? ((remote-target target) (state symbol))
  (if (= (-> *multiplayer-info* players (-> remote-target saved-owner) tgt_state) state) #t #f)
  )

(defun handle-new-mp-state ((tgt-idx int) (remote-target target))
  (set! (-> *multiplayer-info* players tgt-idx mp_state_check) (-> *multiplayer-info* players tgt-idx mp_state))
  (if (and (is-interactive? tgt-idx) (not (logtest? (-> remote-target control root-prim prim-core collide-as) (collide-kind target-remote)))) ;; add collision if interactive
    (logior! (-> remote-target control root-prim collide-as) (collide-kind target-remote))
    )
  (if (and (is-active? tgt-idx) (logtest? (-> remote-target control root-prim collide-as) (collide-kind target-remote)))
    (logclear! (-> remote-target control root-prim collide-as) (collide-kind target-remote))
    )
  )

(defun is-grabbed? ()
  (logtest? (-> *target* state-flags)
    (state-flags grabbed)
    )
  )

(defun has-all-citadel-cells? ()
  (and
    (task-closed? (game-task citadel-sage-green) (task-status need-resolution))
    (task-closed? (game-task citadel-sage-blue) (task-status need-resolution))
    (task-closed? (game-task citadel-sage-red) (task-status need-resolution))
    (task-closed? (game-task citadel-sage-yellow) (task-status need-resolution))
    )
  )

(defun current-level-is-zoomer-restricted? ()
  (let ((level-name (symbol->string (-> (level-get-target-inside *level*) name))))
    (cond
      ((string= level-name "firecanyon")
        (not (-> *zoomer-level-unlocks* fire-canyon))
        )
      ((string= level-name "ogre")
        (not (-> *zoomer-level-unlocks* mountain-pass))
        )
      ((string= level-name "lavatube")
        (not (-> *zoomer-level-unlocks* lava-tube))
        )
      (else
        #f
        )
      )
    )
  )

(defun is-valid-level? ((level-name symbol))
  (case level-name
    (('lavatube 'beach 'citadel 'darkcave 'finalboss 'firecanyon
    'jungle 'jungleb 'maincave 'misty 'ogre 'robocave 'rolling 'snow
    'sunken 'sunkenb 'swamp 'training 'village1 'village2 'village3)
      (return #t)
      )
    )
  #f
  )

(defun unlock-zoomer-in-current-level ()
  (let ((level-name (symbol->string (-> (level-get-target-inside *level*) name))))
    (cond
      ((string= level-name "firecanyon")
        (set! (-> *zoomer-level-unlocks* fire-canyon) #t)
        )
      ((string= level-name "ogre")
        (set! (-> *zoomer-level-unlocks* mountain-pass) #t)
        )
      ((string= level-name "lavatube")
        (set! (-> *zoomer-level-unlocks* lava-tube) #t)
        )
      (else
        #f
        )
      )
    )
  )

(defun remove-remote-collision ((ghost-seconds float))
  (set! *remote-stuck-released* #t)
  (set! *remote-stuck-release-timestamp* (+ (current-time) (seconds ghost-seconds)))
  (logclear! (-> *target* control root-prim collide-with) (collide-kind target-remote))
  (none)
  )

(defun get-team-cell-count ()
  (let ((team-cell-count 0))
    (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
      (if (and
            (is-interactive? tgt-idx)
            (is-teammate? tgt-idx)
          )
          (set! team-cell-count (+ team-cell-count (-> *multiplayer-info* players tgt-idx cells_collected)))
        )
      )
    team-cell-count
    )
  )

(defun get-team-count ()
  (let ((team-count 0))
    (dotimes (team-id MAX_TEAM_COUNT)
      (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
        (when (and
              (!= (-> *multiplayer-info* players tgt-idx mp_state) (mp-tgt-state mp-tgt-disconnected))
              (= (-> *multiplayer-info* players tgt-idx team_id) team-id)
            )
            (set! team-count (+ team-count 1))
            (goto player-count-end)
          )
        )
        (label player-count-end)
      )
    team-count
    )
  )

(defun team-has-most-cells? ()
  (if (= -1 (-> *self-player-info* team_id))
    (return #t)
    )
  (if (= (-> *multiplayer-info* game free_for_all) 1)
    (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
      (if (and
            (is-interactive? tgt-idx)
            (> (-> *multiplayer-info* players tgt-idx cells_collected) (-> *self-player-info* cells_collected))
          )
        (return #f)
        )
      )
    (let ((team-cell-count (get-team-cell-count)))
      (dotimes (team-id MAX_TEAM_COUNT)
        (if (!= team-id (-> *self-player-info* team_id))
          (let ((other-team-cell-count 0))
            (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
              (when (and
                    (is-interactive? tgt-idx)
                    (= (-> *multiplayer-info* players tgt-idx team_id) team-id)
                  )
                  (set! other-team-cell-count (+ other-team-cell-count (-> *multiplayer-info* players tgt-idx cells_collected)))
                  (if (> other-team-cell-count team-cell-count)
                    (return #f)
                    )
                )
              )
            )
          )
        )
      )
    )
    #t
  )

(defun is-same-level? ((level0 symbol) (level1 symbol))
  (or (= level0 level1)
      (and (symbol-member? level0 '(maincave robocave darkcave)) (symbol-member? level1 '(maincave robocave darkcave)))
      (and (symbol-member? level0 '(sunken sunkenb)) (symbol-member? level1 '(sunken sunkenb)))
      (and (symbol-member? level0 '(jungle jungleb)) (symbol-member? level1 '(jungle jungleb)))
      (and (symbol-member? level0 '(citadel finalboss)) (symbol-member? level1 '(citadel finalboss)))
      )
  )

(defun all-teammates-in-same-level? ()
  (let ((level-name (-> (level-get-target-inside *level*) name)))
    (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
      (if (and
            (is-interactive? tgt-idx)
            (is-teammate? tgt-idx)
            (not (is-same-level? level-name (-> *multiplayer-info* players tgt-idx current_level)))
          )
        (return #f)
        )
      )
    )
  #t
  )

(defun is-level-alive? ((level-name symbol))
  (if (or
      (and (-> *load-state* want 0)
        (= level-name (-> *load-state* want 0 name))
        (case (-> *load-state* want 0 display?)
          (('special 'special-vis #f) #f)
          (else #t)
          )
        )
      (and (-> *load-state* want 1)
        (= level-name (-> *load-state* want 1 name))
        (case (-> *load-state* want 1 display?)
          (('special 'special-vis #f) #f)
          (else #t)
          )
        )
      )
    #t
    #f
    )
  )

(defun is-target-current-level-alive? ((tgt-idx int))
    (is-level-alive? (-> *multiplayer-info* players tgt-idx current_level))
  )

(defun is-target-in-any-active-level? ((remote-target target))
  (when target
    (dotimes (s5-1 (-> *level* length))
      (let ((s4-0 (-> *level* level s5-1)))
        (if (and (= (-> s4-0 status) 'active) (point-in-boxes? s4-0 (-> remote-target root trans)))
          (return #t)
          )
        )
      )
    )
  #f
  )

(defun get-target-active-level ((remote-target target))
  (when target
    (dotimes (s5-1 (-> *level* length))
      (let ((s4-0 (-> *level* level s5-1)))
        (when (and (= (-> s4-0 status) 'active) (point-in-boxes? s4-0 (-> remote-target root trans)))
          (return (-> s4-0 name))
          )
        )
      )
    )
  #f
  )

(defun game-has-other-targets? ()
  (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
    (let ((target (get-target tgt-idx)))
      (when (and target (!= target *target*))
        (return #t)
        )
      )
    )
    #f
  )


(defun get-preferable-level-slot ()
  (cond
    ((or (not (-> *load-state* want 0)) (not (is-valid-level? (-> *load-state* want 0 name))))
      0
      )
    ((or (not (-> *load-state* want 1)) (not (is-valid-level? (-> *load-state* want 1 name))))
      1
      )
    ((not (is-level-alive? (-> *load-state* want 0 name)))
      0
      )
    ((not (is-level-alive? (-> *load-state* want 1 name)))
      1
      )
    ((= (-> *load-state* want 0 display?) #f)
      0
      )
    ((= (-> *load-state* want 1 display?) #f)
      1
      )
    (else
      (let ((current-level (get-target-active-level (get-spectator-target))))
        (cond
          ((!= current-level #f)
            (if (= (-> *load-state* want 0 name) current-level)
              1
              0
              )
            )
            (else
            (if (and (-> *spectator-handler* is_spectator?) (= (-> *spectator-handler* last_level_slot_used) 0))
                1
                0
              )
            )
          )
        )
      )
    )
  )

(defun remote-target-move-dist ((target target) (arg0 time-frame))
  (when target
    (let ((s5-0 (new-stack-vector0))
          (f30-0 0.0)
          (gp-0 0)
          )
      (let* ((v1-0 127)
            (a1-6 (-> target control history-data (logand (+ (-> target control unknown-halfword00) v1-0) 127)))
            )
        (while (and (< (- (-> *display* base-frame-counter) (-> a1-6 time)) arg0) (> v1-0 0))
          (vector+! s5-0 s5-0 (-> a1-6 trans))
          (+! gp-0 1)
          (+! v1-0 -1)
          (set! a1-6 (-> target control history-data (logand (+ (-> target control unknown-halfword00) v1-0) 127)))
          )
        )
      (vector-float/! s5-0 s5-0 (the float gp-0))
      (let ((s4-0 (- 128 gp-0)))
        (while (< s4-0 128)
          (let ((v1-9 (-> target control history-data (logand (+ (-> target control unknown-halfword00) s4-0) 127))))
            (+! f30-0 (vector-vector-distance s5-0 (-> v1-9 trans)))
            )
          (+! s4-0 1)
          )
        )
      (/ f30-0 (the float gp-0))
      )
    )
  )

(defun remote-target-in-close-by-environment? ((remote-target target))
  (if
    ;(and (process-close? remote-target 500000.0) ;; prevents some crashing in recording tool, but causes remote targets to freeze if they're on zoomer and far away
      (or
        (= remote-target *target*)
        (is-target-in-any-active-level? remote-target)
        (and (is-target-current-level-alive? (the int (-> remote-target saved-owner))) (< (remote-target-move-dist remote-target (seconds 1.5)) 250000.0))
        )
      ;)
    #t
    #f
    )
  )

(defun is-camera-within-target-dist? ((target target) (dist float))
  (and target (-> *camera* child 0) (< (vector-vector-distance (remote-target-pos 0 target) (-> (the-as camera-slave (-> *camera* child 0)) trans)) dist))
  )

(defun all-teammates-on-level-racer? ()
  (let ((level-name (-> (level-get-target-inside *level*) name)))
    (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
      (let ((target (get-interactive-target tgt-idx)))
        (if (and
              (is-interactive? tgt-idx)
              (is-teammate? tgt-idx)
              (or (not (is-same-level? level-name (-> *multiplayer-info* players tgt-idx current_level)))
                (not (target-on-racer? target))
              )
            )
          (return #f)
          )
        )
      )
    )
  #t
  )

(defun check-lockout-restrictions ()
  (let ((level-name (symbol->string (-> (level-get-target-inside *level*) name)))
        (has-most-cells (team-has-most-cells?))
      )
    (set! *allow-final-boss?* has-most-cells)
    (when (string= level-name "finalboss")
      (when has-most-cells
        (set! (-> (the-as plat-eco-finalboss (process-by-ename "plat-eco-finalboss-1")) speed) 0.1)
        )
      (when (not has-most-cells)
        (set-continue! *game-info* "finalboss-start")
        (set! (-> (the-as plat-eco-finalboss (process-by-ename "plat-eco-finalboss-1")) speed) 0.0)
        )
      )
    )
  )

(defun check-citadel-skip ()
  (when (and (= (-> *multiplayer-info* game citadel_skip_version) (citadel-skip-version patched)) (not (has-all-citadel-cells?)))
    (if (name= (-> *game-info* current-continue name) "citadel-elevator")
      (set-continue! *game-info* "citadel-start")
      )
    (if (name= (-> (level-get-target-inside *level*) name) "finalboss")
      (start 'play (get-continue-by-name *game-info* "citadel-elevator"))
      )
    )

  (when (and *allow-one-time-citadel-skip?*
        (= (-> *multiplayer-info* game citadel_skip_version) (citadel-skip-version shared))
        (name= (-> *game-info* current-continue name) "citadel-start")
        (task-closed? (game-task citadel-sage-green) (task-status need-resolution))
      )
      (set-continue! *game-info* "citadel-elevator")
    )
  )



;; Custom checkpoint storage
(define *tmp-continue-point* (new 'static 'continue-point
  :name "tmp"
  :level #f
  :trans (new 'static 'vector :w 1.0)
  :quat (new 'static 'quaternion :w 1.0)
  :camera-trans (new 'static 'vector :w 1.0)
  :camera-rot (new 'static 'array float 9)
  :load-commands '()
  :vis-nick #f
  :lev0 #f
  :disp0 #f
  :lev1 #f
  :disp1 #f
  )
  )

(define *tmp-flut?* #f)
(define *tmp-zoomer?* #f)
(define *full-hp?* #f)
(define *last-real-continue-point* (the-as continue-point #f))

(defun continue-point-copy! ((dst continue-point) (src continue-point))
  (set! (-> dst level) (-> src level))
  (set! (-> dst quat y) 0.0)
  (set! (-> dst quat w) 1.0)
  (set! (-> dst load-commands) (-> src load-commands))
  (set! (-> dst vis-nick) (-> src vis-nick))
  (when (-> *level* level0)
    (set! (-> dst lev0) (-> *level* level0 name))
    (set! (-> dst lev0) (-> *level* level0 name))
    (set! (-> dst disp0) (-> *level* level0 display?))
    )
  (when (-> *level* level1)
    (set! (-> dst lev1) (-> *level* level1 name))
    (set! (-> dst disp1) (-> *level* level1 display?))
    )
  (none)
  )


(defun camera-rot-copy! ((dst continue-point) (src matrix))
  (set! (-> dst camera-rot 0) (-> src vector 0 x))
  (set! (-> dst camera-rot 1) (-> src vector 0 y))
  (set! (-> dst camera-rot 2) (-> src vector 0 z))
  (set! (-> dst camera-rot 3) (-> src vector 1 x))
  (set! (-> dst camera-rot 4) (-> src vector 1 y))
  (set! (-> dst camera-rot 5) (-> src vector 1 z))
  (set! (-> dst camera-rot 6) (-> src vector 2 x))
  (set! (-> dst camera-rot 7) (-> src vector 2 y))
  (set! (-> dst camera-rot 8) (-> src vector 2 z))
  (none)
  )


(defun speedrun-reset-common-settings ()
  ;; disable hints (this seems to be overriden by your slot 1 save though)
  (set! (-> *setting-control* default play-hints) #f)
  ;; ensure `force actors` is not enabled
  ;; (set! (-> *pc-settings* ps2-actor-vis?) #t)
  ;; force FPS to `60`
  ;; (set-frame-rate! *pc-settings* 60 #t)
  ;; skip intro cutscene
  (close-specific-task! (game-task intro) (task-status need-resolution))
  (none)
  )


(defun spawn-temp-checkpoint ()
  (when (-> *tmp-continue-point* level)
    ;; store last real checkpoint to restore later
    (when (not (string= (-> *game-info* current-continue name) "tmp"))
      (set! *last-real-continue-point* (-> *game-info* current-continue))
      )
    (set! (-> *game-info* current-continue) *tmp-continue-point*)
    (initialize! *game-info* 'dead (the-as game-save #f) (the-as string #f))
    (speedrun-reset-common-settings)

    )
  (none)
  )

(defun store-temp-checkpoint ()
  ;; outside of bsp breaks shit
  (when (or (-> *level* level0 inside-boxes?) (-> *level* level1 inside-boxes?))
    ;; assume current continue is good enough for the current location
    (continue-point-copy! *tmp-continue-point* (-> *game-info* current-continue))
    (vector-copy! (-> *tmp-continue-point* trans) (-> *target* root trans))
    (quaternion-copy! (-> *tmp-continue-point* quat) (-> *target* control unknown-quaternion00))
    (vector-copy! (-> *tmp-continue-point* camera-trans) (-> *camera-combiner* trans))
    (camera-rot-copy! *tmp-continue-point* (-> *camera-combiner* inv-camera-rot))

    (set! *full-hp?* (and (!= *target* #f)
                  (= (-> *target* fact health) 3.0)
                  (= (-> *target* fact eco-pill) 50.0)
                  ))
    (set! *tmp-flut?* #f)
    (set! *tmp-zoomer?* #f)
    (case (-> *target* state)
      ((target-flut-stance)
        (set! *tmp-flut?* #t)
        )
      ((target-racing)
        (set! *tmp-zoomer?* #t)
        )
      )
    )
  (none)
  )